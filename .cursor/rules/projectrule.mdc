---
description: 
globs: 
alwaysApply: false
---
# Racker Project Rules and Documentation

## System Overview
This is a **Laravel Breeze React application** called "racker" using **Laravel Sail** for development environment management with a **complete multi-tenancy system**.

**Development Environment**: This project uses Laravel Sail for development. All artisan commands should be run using `./vendor/bin/sail artisan` instead of `php artisan`.

## Project Setup
- **Project Name**: racker
- **Framework**: Laravel (latest version)
- **Authentication**: Laravel Breeze
- **Frontend**: React with Inertia.js
- **Development Environment**: Laravel Sail (Docker-based)
- **Database**: MySQL (via Sail)
- **Build Tool**: Vitegi
- **Multi-Tenancy**: Single database with tenant_id using stancl/tenancy package

## Multi-Tenancy Architecture

### Overview
The system implements **single-database multi-tenancy** where all tenants share the same database but data is isolated using `tenant_id` columns. This approach provides:
- Cost-effective scaling
- Simplified backup and maintenance
- Shared application logic
- Secure data isolation

### User Types & Access Levels

1. **Central Admin**
   - Full system access across all tenants
   - Can create, manage, and delete tenants
   - Can manage all users in the system
   - Access to system-wide settings and analytics
   - Routes: `/central-admin/*`

2. **Tenant Admin**
   - Full access within their specific tenant
   - Can manage users within their tenant
   - Can configure tenant-specific settings
   - Cannot access other tenants' data
   - Routes: `/tenant-admin/*`

3. **Tenant Users**
   - Access to tenant-specific features
   - Can view and interact with tenant data
   - Role-based permissions within tenant

### Database Structure

#### Core Tables
- **tenants**: Stores tenant organizations (UUID-based)
- **domains**: Maps domains/subdomains to tenants
- **users**: All users with `tenant_id` and `is_central_admin` fields
- **roles**: Scoped roles (central vs tenant-specific)
- **user_roles**: User-role assignments with tenant scoping

#### Key Fields
- `tenant_id` (nullable): Links records to specific tenants
- `is_central_admin` (boolean): Identifies central administrators
- `type` (enum): Distinguishes central vs tenant roles

### Frontend Architecture

#### Layouts
- **CentralAdminLayout**: Indigo theme for central admin interface
- **TenantAdminLayout**: Emerald theme for tenant admin interface
- **AuthenticatedLayout**: Standard user interface
- **GuestLayout**: Public pages

#### Admin Dashboards
- **Central Admin Dashboard**: System-wide statistics, tenant management, quick actions
- **Tenant Admin Dashboard**: Tenant-specific stats, user management, tenant info

### Backend Implementation

#### Controllers
- **CentralAdminController**: System-wide admin operations
- **TenantController**: Tenant CRUD operations with automatic setup
- **TenantAdminController**: Tenant-scoped user management

#### Middleware
- **EnsureCentralAdmin**: Protects central admin routes
- **EnsureTenantAdmin**: Protects tenant admin routes (allows central admin access)

#### Models
- **Tenant**: Extended with domain relationships and custom logic
- **User**: Enhanced with role management and tenant scoping
- **Role**: Permission-based with tenant/central scoping

### Routing System

#### Smart Dashboard Routing
The system automatically redirects users to appropriate dashboards:
- Central Admins â†’ `/central-admin/dashboard`
- Tenant Admins â†’ `/tenant-admin/dashboard`
- Regular Users â†’ `/dashboard`

#### Route Structure
```
/central-admin/*     - Central admin routes (central.admin middleware)
/tenant-admin/*      - Tenant admin routes (tenant.admin middleware)
/                    - Public and authenticated user routes
```

### Security Features

#### Data Isolation
- Automatic tenant scoping on queries
- Middleware-based access control
- Cross-tenant access prevention
- Role-based permission system

#### Access Control
- Central admins can access any tenant's data
- Tenant admins restricted to their tenant only
- Users see only their tenant's data
- Proper authentication and authorization

## Important Development Notes

### Always use Sail
- Use `./vendor/bin/sail` prefix for all commands (artisan, composer, npm)
- Docker Required: Ensure Docker Desktop is running before starting Sail

### Multi-Tenancy Considerations
- Always consider tenant context when writing queries
- Use appropriate middleware for route protection
- Test cross-tenant access prevention
- Maintain data isolation in all features

### Frontend Development
- Use appropriate layout for user type
- Implement responsive design
- Follow established color schemes (indigo/emerald)
- Include proper navigation and breadcrumbs

## Testing the System

### Initial Setup
1. Run migrations: `./vendor/bin/sail artisan migrate`
2. Seed database: `./vendor/bin/sail artisan db:seed`
3. Build assets: `./vendor/bin/sail npm run build`

### Test Accounts
- **Central Admin**: admin@racker.com / password
- **Tenant Admins**: Created when tenants are created (default password: password)

### Testing Flow
1. Login as central admin
2. Create new tenants via dashboard
3. Test tenant admin access
4. Verify data isolation
5. Test user management within tenants

## Current Features Implemented

### âœ… Backend
- **Multi-Tenancy Core**
  - Complete tenant management system with stancl/tenancy package
  - Single database architecture with tenant isolation
  - Role-based access control with central/tenant scoping
  - Secure data isolation and middleware protection
  - Automatic tenant setup with role creation
- **User Management**
  - Advanced user management with scoping
  - Role assignment and permission checking
  - Central admin and tenant admin distinction
  - Search and filtering capabilities
  - CRUD operations with proper validation
- **Controllers & Routes**
  - CentralAdminController with full system access
  - TenantController for tenant CRUD operations
  - TenantAdminController for tenant-scoped operations
  - Secure routing with middleware protection

### âœ… Frontend
- **Admin Dashboards**
  - Modern responsive central admin dashboard with statistics
  - Tenant admin dashboard with scoped data
  - Beautiful color-coded layouts (indigo/emerald themes)
  - Quick action panels and navigation
- **User Management Interface**
  - Advanced search with real-time filtering
  - Multi-level filters (type, tenant, status)
  - Modal-based editing with form validation
  - Delete confirmation modals
  - Comprehensive statistics display
- **Tenant Management**
  - Tenant creation workflow with admin setup
  - Beautiful grid layout with search/filter
  - Tenant cards with statistics and actions
  - Status indicators and domain management
- **Component System**
  - Reusable Modal component with animations
  - Professional form components
  - Responsive navigation layouts
  - Error handling and validation display

### âœ… Recently Completed
- **Enhanced Central Admin User Management**
  - Advanced search functionality (by name/email)
  - Multi-level filtering (user type, tenant, status)
  - Modal-based user editing with form validation
  - Confirmation modals for user deletion
  - Real-time search with debouncing
  - Comprehensive user statistics dashboard
- **System Settings Page**
  - Application configuration management
  - Permission toggles (tenant creation, user registration, etc.)
  - Tenant limit settings
  - Role management overview
  - System status monitoring
- **Enhanced Modal System**
  - Reusable Modal component with proper animations
  - Form handling within modals
  - Error handling and validation display

### ðŸ”„ Current Issues
- **Tenant Name Display**: Existing tenants show as "Unnamed Tenant" due to data retrieval issue
  - Data is correctly stored in database as JSON
  - Eloquent model casting not working properly for existing records
  - Requires investigation of stancl/tenancy package compatibility

### ðŸŽ¯ Next Development Priorities
1. **Resolve tenant name display issue**
   - Debug Eloquent JSON casting problem
   - Ensure consistent tenant name display across all components
2. **Enhanced tenant management features**
   - Tenant details view with statistics
   - Tenant settings configuration
   - Bulk tenant operations
3. **Advanced user features**
   - User invitation system with email notifications
   - Bulk user operations (import/export)
   - User activity logging
4. **System enhancements**
   - Audit logging for admin actions
   - Advanced analytics and reporting
   - Email configuration and testing
   - Backup and maintenance tools
5. **Security improvements**
   - Two-factor authentication
   - Session management
   - API rate limiting
   - Security audit logs 